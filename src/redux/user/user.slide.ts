import { createSlice, PayloadAction, createAction } from "@reduxjs/toolkit"
import { IUser } from "../../types/backend";

export interface IUserState {
    isPending: boolean,
    isError: boolean,
    data: IUser[],
    errors: any,

    isCreating: boolean,
    isCreateSucceed: boolean,

    isUpdating: boolean,
    isUpdateSucceed: boolean,

    isDeleting: boolean,
    isDeleteSucceed: boolean,
}

const initialState: IUserState = {
    isPending: false,
    isError: false,
    data: [],
    errors: [],

    isCreating: false,
    isCreateSucceed: false,

    isUpdating: false,
    isUpdateSucceed: false,

    isDeleting: false,
    isDeleteSucceed: false,
}

export const loginPending = createAction<{ email: string; password: string }>("loginPending");
export const logout = createAction("logout");


export const fetchUserPending = createAction("fetchUserPending");
export const fetchUserSuccess = createAction<IUser[]>("fetchUserSuccess");
export const fetchUserFailed = createAction("fetchUserFailed");

export const createUserPending = createAction<{ email: string; name: string }>("createUserPending");
export const createUserSuccess = createAction("createUserSuccess");
export const createUserFailed = createAction("createUserFailed");

export const updateUserPending = createAction<{ id: number; email: string; name: string }>("updateUserPending");
export const updateUserSuccess = createAction("updateUserSuccess");
export const updateUserFailed = createAction("updateUserFailed");

export const deleteUserPending = createAction<{ id: number }>("deleteUserPending");
export const deleteUserSuccess = createAction("deleteUserSuccess");
export const deleteUserFailed = createAction("deleteUserFailed");

export const userSlice = createSlice({
    name: "user",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchUserPending, (state, action) => {
                state.isPending = true;
                state.isError = false;
            })
            .addCase(fetchUserSuccess, (state, action) => {
                state.isPending = false;
                state.isError = false;
                state.data = action.payload;
            })
            .addCase(fetchUserFailed, (state, action) => {
                state.isPending = false;
                state.isError = true;
            })
            .addCase(createUserPending, (state, action) => {
                state.isCreating = true;
                state.isCreateSucceed = false;
            })
            .addCase(createUserSuccess, (state, action) => {
                state.isCreating = false;
                state.isCreateSucceed = true;
            })
            .addCase(createUserFailed, (state, action) => {
                state.isCreating = false;
            })
            .addCase(updateUserPending, (state, action) => {
                state.isUpdating = true;
                state.isUpdateSucceed = false;
            })
            .addCase(updateUserSuccess, (state, action) => {
                state.isUpdating = false;
                state.isUpdateSucceed = true;
            })
            .addCase(updateUserFailed, (state, action) => {
                state.isUpdating = false;
            })
            .addCase(deleteUserPending, (state, action) => {
                state.isDeleting = true;
                state.isDeleteSucceed = false;
            })
            .addCase(deleteUserSuccess, (state, action) => {
                state.isDeleting = false;
                state.isDeleteSucceed = true;
            })
            .addCase(deleteUserFailed, (state, action) => {
                state.isDeleting = false;
            })
    },
})

export const { } = userSlice.actions



export default userSlice.reducer
